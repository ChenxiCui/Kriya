# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kenlm', [dirname(__file__)])
        except ImportError:
            import _kenlm
            return _kenlm
        if fp is not None:
            try:
                _mod = imp.load_module('_kenlm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kenlm = swig_import_helper()
    del swig_import_helper
else:
    import _kenlm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def readLM(*args):
  return _kenlm.readLM(*args)
readLM = _kenlm.readLM

def deleteLM(*args):
  return _kenlm.deleteLM(*args)
deleteLM = _kenlm.deleteLM

def getBegSentState(*args):
  return _kenlm.getBegSentState(*args)
getBegSentState = _kenlm.getBegSentState

def getEmptyState(*args):
  return _kenlm.getEmptyState(*args)
getEmptyState = _kenlm.getEmptyState

def getWordIndex(*args):
  return _kenlm.getWordIndex(*args)
getWordIndex = _kenlm.getWordIndex

def scoreUNK(*args):
  return _kenlm.scoreUNK(*args)
scoreUNK = _kenlm.scoreUNK

def getHistory(*args):
  return _kenlm.getHistory(*args)
getHistory = _kenlm.getHistory

def getWordProb(*args):
  return _kenlm.getWordProb(*args)
getWordProb = _kenlm.getWordProb

def getLMHeuProb(*args):
  return _kenlm.getLMHeuProb(*args)
getLMHeuProb = _kenlm.getLMHeuProb

def getLeftEdgeHeu(*args):
  return _kenlm.getLeftEdgeHeu(*args)
getLeftEdgeHeu = _kenlm.getLeftEdgeHeu

def getRightEdgeHeu(*args):
  return _kenlm.getRightEdgeHeu(*args)
getRightEdgeHeu = _kenlm.getRightEdgeHeu

def getSentenceProb(*args):
  return _kenlm.getSentenceProb(*args)
getSentenceProb = _kenlm.getSentenceProb

def getCorpusProb(*args):
  return _kenlm.getCorpusProb(*args)
getCorpusProb = _kenlm.getCorpusProb


def getNGramProb(*args):
  return _kenlm.getNGramProb(*args)
getNGramProb = _kenlm.getNGramProb

